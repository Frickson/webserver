#  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
##  SPDX-License-Identifier: MIT-0
version: 0.2
env:
  parameter-store:
    IMAGE_REPO_NAME: "IMAGE_REPO_NAME"
    DOCKER_PASSWORD: "DOCKER_PASSWORD"
    DOCKER_USERNAME: "DOCKER_USERNAME"
    AWS_ACCOUNT_ID: "acc-id"
    SnykApiKey: "SnykApiKey"
phases:
  install:
    commands:
      - echo "in the install phase"
      - npm install -g snyk
      - jq --version
    finally:
      - echo This always runs even if the login command fails   
  pre_build:
    commands:
      - echo "Logging in to Docker Hub"
      - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
      - docker version
      - echo "stage pre_build completed"
  build:
    commands:
      - echo "inside build stage"
      - cd $CODEBUILD_SRC_DIR
      # - ls
      # - cd test/devsecops-cicd-containers-main
      # - docker build . -t $IMAGE_REPO_NAME:$CODEBUILD_RESOLVED_SOURCE_VERSION -f dockerfile-wp.dockerfile
      # Snyk Auth using API token
      - snyk config set api=$SnykApiKey
      ## To scan the container image
      # - snyk container test $IMAGE_REPO_NAME:$CODEBUILD_RESOLVED_SOURCE_VERSION --file=dockerfile-wp.dockerfile --json --exclude-base-image-vulns --severity-threshold=high > snyk-results.json
      - docker build -t $IMAGE_REPO_NAME:$CODEBUILD_RESOLVED_SOURCE_VERSION .
      - snyk container test $IMAGE_REPO_NAME:$CODEBUILD_RESOLVED_SOURCE_VERSION --file=Dockerfile --exclude-base-image-vulns --severity-threshold=high --json > snyk-results.json
      - TAG="$CODEBUILD_RESOLVED_SOURCE_VERSION"
      - docker tag $IMAGE_REPO_NAME:$CODEBUILD_RESOLVED_SOURCE_VERSION ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:latest
      - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
  post_build:
    commands:
      - |
        jq "{ \"messageType\": \"CodeScanReport\", \"reportType\": \"SNYK\", \
        \"createdAt\": $(date +\"%Y-%m-%dT%H:%M:%S.%3NZ\"), \"source_repository\": env.CODEBUILD_SOURCE_REPO_URL, \
        \"source_branch\": env.CODEBUILD_SOURCE_VERSION, \
        \"build_id\": env.CODEBUILD_BUILD_ID, \
        \"source_commitid\": env.CODEBUILD_RESOLVED_SOURCE_VERSION, \
        \"report\": . }" snyk-results.json > payload.json
      # - cat payload.json
      - echo ""
      - |
        if (grep -E 'high|critical' payload.json); then 
          aws lambda invoke --function-name ImpToSecurityHubEKS --payload file://payload.json snyk-results.json && echo "LAMBDA_SUCCEDED" || echo "LAMBDA_FAILED";
          echo "There are critical or high vulnerabilities.. failing the build"
          docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/my-image:latest
        elif (grep -E 'medium|low' payload.json); then
          aws lambda invoke --function-name ImpToSecurityHubEKS --payload file://payload.json snyk-results.json && echo "LAMBDA_SUCCEDED" || echo "LAMBDA_FAILED";
          docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/my-image:latest
        fi
      - printf '[{"name":"hello-k8s","imageUri":"%s"}]' testing:$TAG > build.json
artifacts:
  type: zip
  files: '**/*'