---
Name: My-CodePipeline
RoleArn: arn:aws:iam::123456789012:role/MyCodePipelineServiceRole
ArtifactStore:
  Type: S3
  Location: my-codepipeline-artifacts-bucket
Stages:
  - Name: Source
    Actions:
      - Name: SourceAction
        ActionTypeId:
          Category: Source
          Owner: AWS
          Provider: CodeCommit
          Version: "1"
        OutputArtifacts:
          - Name: SourceOutput
        Configuration:
          RepositoryName: my-codecommit-repo
          BranchName: master
          PollForSourceChanges: false
  - Name: Build
    Actions:
      - Name: BuildAction
        ActionTypeId:
          Category: Build
          Owner: AWS
          Provider: CodeBuild
          Version: "1"
        InputArtifacts:
          - Name: SourceOutput
        OutputArtifacts:
          - Name: BuildOutput
        Configuration:
          ProjectName: my-codebuild-project
  - Name: DeployStaging
    Actions:
      - Name: DeployStagingAction
        ActionTypeId:
          Category: Deploy
          Owner: AWS
          Provider: CodeDeployToECS
          Version: "1"
        InputArtifacts:
          - Name: BuildOutput
        Configuration:
          AppSpecTemplateArtifact: BuildOutput::appspec.yml
          ContainerName: my-container
          ServiceName: my-service-staging
          TaskDefinitionTemplateArtifact: BuildOutput::taskdef.json
          Image1ArtifactName: BuildOutput::image1
          Image1ContainerName: my-container
          Image1Tag: latest
          TaskDefinitionParameterOverrides: '{"containerOverrides":[{"name":"my-container","environment":[{"name":"NODE_ENV","value":"staging"}]}]}'
          ClusterName: my-ecs-cluster
  - Name: IntegrationTests
    Actions:
      - Name: IntegrationTestsAction
        ActionTypeId:
          Category: Test
          Owner: AWS
          Provider: CodeBuild
          Version: "1"
        InputArtifacts:
          - Name: SourceOutput
          - Name: BuildOutput
        Configuration:
          ProjectName: my-codebuild-integration-tests-project
          EnvironmentVariables:
            - Name: STAGING_ENDPOINT
              Value: !Join ['', ['http://', !GetAtt 'MyServiceStaging.LoadBalancer.DNSName']]
  - Name: Approval
    Actions:
      - Name: ApprovalAction
        ActionTypeId:
          Category: Approval
          Owner: AWS
          Provider: Manual
          Version: "1"
        Configuration:
          NotificationArn: arn:aws:sns:us-east-1:123456789012:MyApprovalNotificationTopic
          CustomData: Please approve the deployment to production.
  - Name: DeployProd
    Actions:
      - Name: DeployProdAction
        ActionTypeId:
          Category: Deploy
          Owner: AWS
          Provider: CodeDeployToECS
          Version: "1"
        InputArtifacts:
          - Name: BuildOutput
        Configuration:
          AppSpecTemplateArtifact: BuildOutput::appspec.yml
          ContainerName: my-container
          ServiceName: my-service-prod
          TaskDefinitionTemplateArtifact: BuildOutput::taskdef.json
          Image1ArtifactName: BuildOutput::image1
          Image1ContainerName: my-container
          Image1Tag: latest
          TaskDefinitionParameterOverrides: '{"containerOverrides":[{"name":"my-container","environment":[{"name":"NODE_ENV","value":"production"}]}]}'
          ClusterName: my-ecs-cluster
          ActionMode: REPLACE_ON_FAILURE
          DeploymentGroupName: my-codedeploy-deployment-group-prod
  - Name: CleanUp
    Actions:
      - Name: CleanUpAction
        ActionTypeId:
          Category: Invoke
          Owner: AWS
          Provider: Lambda
          Version: "1"
        Configuration:
          FunctionName: my-cleanup-lambda-function
          UserParameters: !Sub '{"stagingServiceName": "${StagingServiceName}", "prodServiceName": "${ProdServiceName}"}'
        